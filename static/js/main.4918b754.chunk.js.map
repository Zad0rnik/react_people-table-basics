{"version":3,"sources":["components/HomePage.tsx","components/PageNavLink.tsx","components/NavBar.tsx","components/NotFoundPage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonCard.tsx","components/PeopleList.tsx","components/PeoplePage.tsx","App.tsx","index.tsx"],"names":["HomePage","memo","className","PageNavLink","to","name","isActive","cn","NavBar","role","NotFoundPage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonCard","person","selectedPerson","slug","sex","born","died","mother","father","motherName","fatherName","PeopleList","people","useParams","map","findParent","parentName","find","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","LoadPeople","useCallback","peopleFromServer","peopleWithParents","useEffect","length","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"0PAEaA,EAAWC,gBAAK,kBAC3B,oBAAIC,UAAU,QAAd,sBAD2B,I,gBCOhBC,EAA+BF,gBAAK,gBAAGG,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OAC/C,cAAC,IAAD,CACED,GAAIA,EACJF,UAAW,gBAAGI,EAAH,EAAGA,SAAH,OACTC,IACE,cAAe,CAAE,8BAA+BD,GAFzC,EAFb,SAQGD,GAT4C,ICNpCG,EAASP,gBAAK,kBACzB,qBACE,UAAQ,MACRC,UAAU,iCACVO,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKP,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAACC,EAAD,CAAaC,GAAG,IAAIC,KAAK,SACzB,cAACF,EAAD,CAAaC,GAAG,UAAUC,KAAK,iBAVZ,ICDdK,EAAeT,gBAAK,kBAC/B,oBAAIC,UAAU,QAAd,2BAD+B,I,6BCO1B,SAASS,IAEd,OANYC,EAMA,IALL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAMvBI,MAAK,kBAAMC,MATA,oEASN,IACLD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IARlB,IAAcP,CASb,C,UCZYQ,EAAS,kBACpB,qBAAKlB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,ECQTmB,EAA8BpB,gBAAK,YAE1C,IADFqB,EACC,EADDA,OAAQC,EACP,EADOA,eAGRlB,EASEiB,EATFjB,KACAmB,EAQEF,EARFE,KACAC,EAOEH,EAPFG,IACAC,EAMEJ,EANFI,KACAC,EAKEL,EALFK,KACAC,EAIEN,EAJFM,OACAC,EAGEP,EAHFO,OACAC,EAEER,EAFFQ,WACAC,EACET,EADFS,WAGF,OACE,qBACE,UAAQ,SACR7B,UAAWK,IAAG,CAAE,yBAA0BiB,IAASD,IAFrD,UAIE,6BACE,cAAC,IAAD,CACEnB,GAAIoB,EACJtB,UAAWK,IAAG,CAAE,kBAA2B,MAARkB,IAFrC,SAIGpB,MAIL,6BAAKoB,IACL,6BAAKC,IACL,6BAAKC,IACJC,EACC,6BACE,cAAC,IAAD,CACExB,GAAIwB,EAAOJ,KACXtB,UAAU,kBAFZ,SAIG4B,MAIL,6BAAKA,GAAc,MAGpBD,EACC,6BACE,cAAC,IAAD,CAAMzB,GAAIyB,EAAOL,KAAjB,SACGO,MAIL,6BAAKA,GAAc,QAI1B,ICzDYC,EAA8B/B,gBAAK,YAAiB,IAAdgC,EAAa,EAAbA,OACjD,EAAgCC,cAAxBX,sBAAR,MAAyB,GAAzB,EAEA,OACE,wBACE,UAAQ,cACRrB,UAAU,uDAFZ,UAIE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCACG+B,EAAOE,KAAI,SAACb,GAAD,OACV,cAACD,EAAD,CACEC,OAAQA,EAERC,eAAgBA,GADXD,EAAOE,KAHJ,QAUnB,IC/BKY,EAAa,SAACH,EAAkBI,GACpC,OAAOJ,EAAOK,MAAK,SAAChB,GAAD,OAAYA,EAAOjB,OAASgC,CAA5B,GACpB,EAEYE,EAAatC,gBAAK,WAC7B,MAA4BuC,mBAAmB,IAA/C,mBAAOP,EAAP,KAAeQ,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,mBAAwB,MAAhE,mBAAOI,EAAP,KAAqBC,EAArB,KAEMC,EAAaC,sBAAW,gCAAC,uGAC7BJ,GAAa,GADgB,kBAIIhC,IAJJ,OAIrBqC,EAJqB,OAMrBC,EAAoBD,EAAiBb,KAAI,SAACb,GAAD,mBAAC,eAC3CA,GAD0C,IAE7CM,OAAQQ,EAAWY,EAAkB1B,EAAOQ,YAC5CD,OAAQO,EAAWY,EAAkB1B,EAAOS,aAHC,IAM/CU,EAAUQ,GACVN,GAAa,GAbc,kDAe3BE,EAAgB,yBAChBF,GAAa,GAhBc,0DAkB5B,IAMH,OAJAO,qBAAU,WACRJ,GACD,GAAE,IAGD,qCACE,oBAAI5C,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,sBAAf,UACGwC,GAAa,cAAC,EAAD,KAEZA,GACA,qCACGE,GACC,mBAAG,UAAQ,qBAAqB1C,UAAU,kBAA1C,kCAKD+B,EAAOkB,OAAS,EACf,cAACnB,EAAD,CAAYC,OAAQA,IAEpB,mBAAG,UAAQ,kBAAX,yDAWf,IChEYmB,EAAM,kBACjB,sBAAK,UAAQ,MAAb,UACE,cAAC5C,EAAD,IAEA,sBAAMN,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmD,KAAK,IAAIC,QAAS,cAACtD,EAAD,MACzB,eAAC,IAAD,CAAOqD,KAAK,UAAUC,QAAS,cAACf,EAAD,IAA/B,UACE,cAAC,IAAD,CACEc,KAAK,kBACLC,QAAS,cAACf,EAAD,MAGX,cAAC,IAAD,CACEgB,OAAK,EACLD,QAAS,cAACf,EAAD,SAGb,cAAC,IAAD,CAAOc,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAUlD,GAAG,IAAIoD,SAAO,MACrD,cAAC,IAAD,CAAOH,KAAK,IAAIC,QAAS,cAAC5C,EAAD,eApBhB,ECCnB+C,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.4918b754.chunk.js","sourcesContent":["import { memo } from 'react';\n\nexport const HomePage = memo(() => (\n  <h1 className=\"title\">Home Page</h1>\n));\n","import React, { memo } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\ninterface Props {\n  to: string\n  name: string\n}\n\nexport const PageNavLink: React.FC<Props> = memo(({ to, name }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => (\n      cn(\n        'navbar-item', { 'has-background-grey-lighter': isActive },\n      )\n    )}\n  >\n    {name}\n  </NavLink>\n));\n","import { memo } from 'react';\nimport { PageNavLink } from './PageNavLink';\n\nexport const NavBar = memo(() => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" name=\"Home\" />\n        <PageNavLink to=\"/people\" name=\"People\" />\n      </div>\n    </div>\n  </nav>\n));\n","import { memo } from 'react';\n\nexport const NotFoundPage = memo(() => (\n  <h1 className=\"title\">Page not found</h1>\n));\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { memo } from 'react';\nimport { Person } from '../types';\n\ninterface Props {\n  person: Person;\n  selectedPerson: string;\n}\n\nexport const PersonCard: React.FC<Props> = memo((\n  { person, selectedPerson },\n) => {\n  const {\n    name,\n    slug,\n    sex,\n    born,\n    died,\n    mother,\n    father,\n    motherName,\n    fatherName,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({ 'has-background-warning': slug === selectedPerson })}\n    >\n      <td>\n        <Link\n          to={slug}\n          className={cn({ 'has-text-danger': sex === 'f' })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      {mother ? (\n        <td>\n          <Link\n            to={mother.slug}\n            className=\"has-text-danger\"\n          >\n            {motherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{motherName || '-'}</td>\n      )}\n\n      {father ? (\n        <td>\n          <Link to={father.slug}>\n            {fatherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{fatherName || '-'}</td>\n      )}\n    </tr>\n  );\n});\n","import { useParams } from 'react-router-dom';\nimport { memo } from 'react';\nimport { Person } from '../types';\nimport { PersonCard } from './PersonCard';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const PeopleList: React.FC<Props> = memo(({ people }) => {\n  const { selectedPerson = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <PersonCard\n            person={person}\n            key={person.slug}\n            selectedPerson={selectedPerson}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import {\n  memo, useEffect, useState, useCallback,\n} from 'react';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { Loader } from './Loader';\nimport { PeopleList } from './PeopleList';\n\nconst findParent = (people: Person[], parentName: string | null) => {\n  return people.find((person) => person.name === parentName);\n};\n\nexport const PeoplePage = memo(() => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  const LoadPeople = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      const peopleWithParents = peopleFromServer.map((person) => ({\n        ...person,\n        mother: findParent(peopleFromServer, person.motherName),\n        father: findParent(peopleFromServer, person.fatherName),\n      }));\n\n      setPeople(peopleWithParents);\n      setIsLoading(false);\n    } catch {\n      setErrorMessage('Failed to load people');\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    LoadPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {!isLoading && (\n            <>\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {people.length > 0 ? (\n                <PeopleList people={people} />\n              ) : (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n            </>\n          )}\n\n        </div>\n      </div>\n    </>\n  );\n});\n","import './App.scss';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { HomePage } from './components/HomePage';\nimport { NavBar } from './components/NavBar';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/people\" element={<PeoplePage />}>\n            <Route\n              path=\":selectedPerson\"\n              element={<PeoplePage />}\n            />\n\n            <Route\n              index\n              element={<PeoplePage />}\n            />\n          </Route>\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}